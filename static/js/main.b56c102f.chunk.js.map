{"version":3,"sources":["LoginPage/LoginPage.js","apis/spotifyHandler.js","apis/graphParams.js","Graph/ControlPanel/ControlPanel.js","Graph/ControlPanel/ControlPanelPopover.js","Graph/CornerButtons.js","Graph/TrackHoverDetails.js","Graph/TrackGraph.js","Graph/Graph.js","LeftBar/ListTrack.js","LeftBar/PlaylistViewer.js","LeftBar/TrackViewer.js","LeftBar/LeftBar.js","DashBoard/HelpModal.js","DashBoard/DashBoard.js","PlaylistSelect/PlaylistList.js","PlaylistSelect/PlaylistSelector.js","apis/login.js","App.js","index.js"],"names":["LoginPage","id","className","onClick","this","props","login","href","target","rel","React","Component","spotifyApi","SpotifyWebApi","spotifyCalls","_userId","undefined","getUserId","a","getMe","appendAnalysis","tracks","trackIds","map","x","getAudioFeaturesForTracks","analysisResponse","audio_features","forEach","item","index","analysis","getPlaylist","playlistId","response","newTracks","items","track","_getSeeds","shuffle","array","counter","length","Math","floor","random","temp","total","options","limit","time_range","getMyTopTracks","seeds","slice","getRecommendations","seed_tracks","min_popularity","recommendationsResponse","getGraphData","playlist","recommended","addTrackToPlaylist","songs","addTracksToPlaylist","removeTrackFromPlaylist","removeTracksFromPlaylist","getUserPlaylists","playlists","userId","filter","owner","AXIS_UNITS","Axis","unit","name","dataFunction","d","ButtonSet","fieldName","option","key","onBtnClick","active","current","CircleIcon","title","viewBox","xmlns","cx","cy","r","fill","color","ControlPanel","state","xAxis","dataFields","yAxis","onRadioBtnClick","bind","selection","field","setState","onChange","btn","ControlPanelPopover","popoverOpen","toggle","placement","isOpen","children","CornerButtons","setDataFields","updateRecommendations","graphRef","forwardedRef","setSelected","getTextWidth","text","font","context","canvas","document","createElement","getContext","measureText","width","TrackHoverDetails","hidden","delay","setTimeout","clearTimeout","y","datum","imageLink","album","images","url","trackName","artistName","artists","_x","max","height","transform","src","style","alt","TrackGraph","externalMutations","chartHeight","chartWidth","resize","clickedId","callback","childName","eventKey","mutation","point","Object","assign","createEventHandler","removeMutation","posInfo","getElementById","getBoundingClientRect","window","addEventListener","removeEventListener","externalEventMutations","theme","VictoryTheme","material","domain","containerComponent","zoomDomain","startDomain","events","eventHandlers","_","clicked","onPointClick","padding","top","bottom","left","right","label","axisLabelComponent","tickLabelComponent","dy","tickComponent","dx","dependentAxis","size","data","graphData","playlistTracks","labels","labelComponent","flyoutComponent","recommendTracks","renderGraph","Graph","newFields","ref","pointClick","ListTrack","artist","i","vertical","removeSong","pointSelect","PlaylistViewer","TrackViewer","isRecommendation","selected","startsWith","albumArt","addTrack","removeTrack","exit","LeftBar","leftSide","HelpModal","modal","buttonLabel","DashBoard","createRef","then","setGraphData","catch","err","console","log","uri","newRec","recTrack","selectedSong","noGutters","exitPlaylist","xs","NoImage","PlaylistOption","img","numberOfTracks","setPlaylist","PlaylistList","listOfplaylists","PlaylistSelector","playlistPaginator","scope","SESSION_KEYS","generateRandomString","possible","charAt","sha256","plain","TextEncoder","encode","crypto","subtle","digest","base64urlencode","btoa","String","fromCharCode","apply","Uint8Array","replace","code_verifier","hash","code_challenge","sessionStorage","setItem","process","open","getItem","setAccessToken","refreshToken","params","URLSearchParams","location","search","has","get","postBody","client_id","grant_type","code","redirect_uri","requestToken","urlEncodedPostBody","axios","post","headers","res","access_token","Date","getTime","expires_in","refresh_token","App","loggedIn","sessionStart","spotifyLogin","ReactDOM","render"],"mappings":"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","file":"static/js/main.b56c102f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Jumbotron } from 'reactstrap';\r\nimport './LoginPage.css';\r\n\r\n\r\nexport default class LoginPage extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Jumbotron id=\"LoginPage\">\r\n\r\n                <h1>Playlist Obsevatory</h1>\r\n\r\n                <p className=\"Subtitle\">This is an app maps the tracks of a playlist into 2D space based on the properties of the track</p>\r\n                <hr />\r\n                <p>You will <b>need 2 things</b> to use this app: A <b>Spotify Premium account</b> and <b>one playlist</b> you would like to edit</p>\r\n                <Button onClick={this.props.login}>Start</Button>\r\n                <div id=\"Creds\">\r\n                    <p >Made by Goh Sato -- <a href=\"https://github.com/Gohsato/PlaylistObservatory\" target=\"_blank\" rel=\"noopener noreferrer\">code</a></p>\r\n                </div>\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}\r\n\r\n","import SpotifyWebApi from 'spotify-web-api-js';\n\nexport const spotifyApi = new SpotifyWebApi();\n\nexport const spotifyCalls = {\n\n    _userId: undefined,\n    getUserId:async function (){\n            if (this._userId === undefined) {\n                this._userId = (await spotifyApi.getMe()).id;\n            }\n            return this._userId;\n    },\n\n\n    appendAnalysis: async function (tracks) {\n        let trackIds = tracks.map(x => x.id);\n        let analysisResponse = await spotifyApi.getAudioFeaturesForTracks(trackIds);\n        analysisResponse = analysisResponse.audio_features;\n        tracks.forEach((item, index) => {\n            item.analysis = analysisResponse[index];\n        });\n        return tracks;\n    },\n\n    getPlaylist: async function (playlistId) {\n        let response = await spotifyApi.getPlaylist(playlistId);\n        let newTracks = response.tracks.items.map(x => x.track);\n        await this.appendAnalysis(newTracks);\n        return newTracks;\n    },\n\n    _getSeeds: async function (playlistId) {\n            //https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n            function shuffle(array) {\n                let counter = array.length;\n                while (counter > 0) {\n                    let index = Math.floor(Math.random() * counter);\n                    counter--;\n                    let temp = array[counter];\n                    array[counter] = array[index];\n                    array[index] = temp;\n                }\n                return array;\n            }\n            let tracks = (await spotifyApi.getPlaylist(playlistId)).tracks;\n            if(tracks.total===0){\n                const options = {\n                    limit:5,\n                    time_range:\"medium_term\"\n                }\n                tracks = await spotifyApi.getMyTopTracks(options);\n            }\n            let seeds = tracks.items.map(x => x.track?x.track.id:x.id);\n            shuffle(seeds);\n            return seeds.slice(0, 5);\n    },\n\n    getRecommendations: async function (playlistId) {\n        const seeds = await this._getSeeds(playlistId);\n        let options = {\n            limit: 10,\n            seed_tracks: seeds,\n            min_popularity: 50,\n        }\n        let recommendationsResponse = await spotifyApi.getRecommendations(options);\n        let newTracks = await this.appendAnalysis(recommendationsResponse.tracks);\n        return newTracks;\n    },\n    getGraphData: async function (playlistId) {\n        return {\n            playlist: await this.getPlaylist(playlistId),\n            recommended: await this.getRecommendations(playlistId)\n        };\n    },\n\n    addTrackToPlaylist: async function (songs, playlistId) {\n        await spotifyApi.addTracksToPlaylist(playlistId, [songs]);\n        return await this.getPlaylist(playlistId);\n    },\n\n    removeTrackFromPlaylist: async function (songs, playlistId) {\n        await spotifyApi.removeTracksFromPlaylist(playlistId, [songs]);\n        return await this.getPlaylist(playlistId);\n    },\n\n    getUserPlaylists: async function () {\n        let playlists = await spotifyApi.getUserPlaylists();\n        const userId = (await this.getUserId());\n        playlists.items = playlists.items.filter((playlist) => playlist.owner.id === userId);\n        return playlists\n    }\n}","\r\nexport var AXIS_UNITS = {\r\n    energy:\"energy\",\r\n    danceability:\"danceability\",\r\n    speechiness:\"speechiness\",\r\n    acousticness:\"acousticness\",\r\n    instrumentalness:\"instrumentalness\",\r\n    liveness:\"liveness\",\r\n    valence:\"valence\",\r\n    \r\n}\r\n\r\nexport function Axis(unit) {\r\n    this.name = unit;\r\n    this.dataFunction = (d)=>d.analysis[unit] * 100;\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Button, Card, CardTitle, Col, Row, Container, CardBody } from 'reactstrap';\r\nimport './ControlPanel.css';\r\nimport { Axis, AXIS_UNITS } from '../../apis/graphParams';\r\n\r\nfunction ButtonSet(props) {\r\n    return (\r\n        <Card className=\"graph-settings-card\">\r\n            <CardBody>\r\n                <CardTitle>{props.fieldName}</CardTitle>\r\n                <Container>\r\n                    <Row>\r\n                        {props.options.map((option) =>\r\n                            <Button key={option} onClick={() => { props.onBtnClick(option) }} active={props.current === option}>\r\n                                {option}\r\n                            </Button>\r\n                        )}\r\n                    </Row>\r\n                </Container>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction CircleIcon(props) {\r\n    return (\r\n        <div className=\"icon\">\r\n            <p>{props.title}:</p>\r\n            <div className=\"dot\">\r\n                <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <circle cx=\"50%\" cy=\"50%\" r=\"2\" fill={props.color} />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass ControlPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xAxis: this.props.dataFields.xAxis,\r\n            yAxis: this.props.dataFields.yAxis,\r\n        }\r\n        this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\r\n    }\r\n    onRadioBtnClick(selection, field) {\r\n        this.setState({ [field]: new Axis(selection) }, () => this.props.onChange(this.state));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"ControlPanel\">\r\n                <Col>\r\n                    <CircleIcon title=\"Recommended Track\" color=\"tomato\" />\r\n                    <CircleIcon title=\"Playlist Track\" color=\"#455A64\" />\r\n                    < ButtonSet fieldName=\"X Axis\" current={this.state.xAxis.name} onBtnClick={(btn) => this.onRadioBtnClick(btn, \"xAxis\")}\r\n                        options={[AXIS_UNITS.energy, AXIS_UNITS.danceability, AXIS_UNITS.valence,AXIS_UNITS.acousticness]} />\r\n                    < ButtonSet fieldName=\"Y Axis\" current={this.state.yAxis.name} onBtnClick={(btn) => this.onRadioBtnClick(btn, \"yAxis\")}\r\n                        options={[AXIS_UNITS.energy, AXIS_UNITS.danceability, AXIS_UNITS.valence,AXIS_UNITS.acousticness]} />\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","import React from 'react';\r\nimport { Button, Popover, PopoverBody, PopoverHeader } from 'reactstrap';\r\nimport './ControlPanel.css'\r\n\r\nclass ControlPanelPopover extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            popoverOpen: false\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            popoverOpen: !this.state.popoverOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button id=\"Popover1\" onClick={this.toggle}>\r\n                    {this.props.title}\r\n                </Button>\r\n                <Popover  placement=\"bottom\" isOpen={this.state.popoverOpen} target=\"Popover1\" toggle={this.toggle}>\r\n                    <PopoverHeader>Graph Settings</PopoverHeader>\r\n                    <PopoverBody>\r\n                        {this.props.children}\r\n                    </PopoverBody>\r\n                </Popover>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ControlPanelPopover;","import React from 'react';\r\nimport { FaHome, FaSyncAlt, FaWrench } from 'react-icons/fa';\r\nimport { Button } from 'reactstrap';\r\nimport ControlPanel from './ControlPanel/ControlPanel';\r\nimport ControlPanelPopover from './ControlPanel/ControlPanelPopover';\r\n\r\nexport default function CornerButtons(props){\r\n    return (\r\n        <div id=\"CornerButtons\">\r\n        <ControlPanelPopover title={<FaWrench />}>\r\n            <ControlPanel dataFields={props.dataFields} onChange={props.setDataFields}\r\n                updateRecommendations={props.updateRecommendations} graphRef={props.forwardedRef} />\r\n        </ControlPanelPopover>\r\n        <div><Button onClick={props.updateRecommendations}><FaSyncAlt /></Button></div>\r\n        {props.forwardedRef.current ?\r\n            <div><Button onClick={props.forwardedRef.current.setSelected}><FaHome /></Button></div> :\r\n            null}\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\nimport './Graph.css';\r\n\r\n//https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript\r\nfunction getTextWidth(text, font) {\r\n  // re-use canvas object for better performance\r\n  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\r\n  var context = canvas.getContext(\"2d\");\r\n  context.font = font;\r\n  var metrics = context.measureText(text);\r\n  return metrics.width;\r\n}\r\n\r\nclass TrackHoverDetails extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      hidden:\"hidden\"\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.delay = setTimeout(()=>{\r\n      this.setState({\r\n        hidden:\"\"\r\n      })\r\n    },550)\r\n  }\r\n  componentWillUnmount(){\r\n    clearTimeout(this.delay);\r\n  }\r\n\r\n  render(){\r\n      let { x, y} = this.props;\r\n      const {datum} = this.props;\r\n      const imageLink = datum.album.images[0].url\r\n  \r\n      const trackName = datum.name;\r\n      const artistName = datum.artists[0].name;\r\n  \r\n      let width = 0;\r\n  \r\n  \r\n      if (datum._x > 40) {\r\n        x=x-15;\r\n        width = Math.max(getTextWidth(trackName, \"bold 18px arial\"), getTextWidth(artistName, \"bold 15px arial\")) + 3 + 100;\r\n      }\r\n  \r\n  \r\n      return (\r\n        <foreignObject x={x} y={y} width=\"400\" height=\"400\" transform={\"translate(-\" + width + \")\"} >\r\n          <div id=\"TrackHoverDetail\" className={this.state.hidden}>\r\n            <img src={imageLink} style={{ height: 100 }} alt=\"album art\" />\r\n            <div>\r\n              <h1>{trackName}</h1>\r\n              <h2>{artistName}</h2>\r\n            </div>\r\n          </div>\r\n        </foreignObject>\r\n      );\r\n  \r\n  }\r\n}\r\n\r\nexport default TrackHoverDetails;","import React, { Component } from 'react';\nimport { VictoryAxis, VictoryChart, VictoryLabel, VictoryScatter, VictoryTheme, VictoryTooltip, VictoryZoomContainer, LineSegment } from 'victory';\nimport TrackHoverDetails from './TrackHoverDetails';\n\nclass TrackGraph extends Component {\n    constructor() {\n        super();\n        this.state = {\n            externalMutations: undefined,\n            chartHeight: undefined,\n            chartWidth: undefined\n        };\n        this.setSelected = this.setSelected.bind(this);\n        this.resize = this.resize.bind(this);\n    }\n\n    createEventHandler(clickedId, callback) {\n        return (\n            {\n                childName: [\"playlist\", \"recommended\"],\n                target: [\"data\"],\n                eventKey: \"all\",\n                mutation: (point) => {\n                    return (clickedId && point.datum.id === clickedId) ?\n                        ({ style: Object.assign({}, point.style, { fill: \"#44ac00\" }) }) :\n                        ({ style: undefined });\n                },\n                callback: callback,\n            }\n        )\n    }\n\n\n    removeMutation() {\n        this.setState({\n            externalMutations: undefined\n        });\n    }\n\n    setSelected(clickedId) {\n        \n        this.setState({\n            externalMutations: [\n                this.createEventHandler(clickedId, this.removeMutation.bind(this))\n            ]\n        })\n    }\n\n    resize() {\n        const posInfo = document.getElementById(\"Graph\").getBoundingClientRect();\n        this.setState({\n            chartHeight: posInfo.height,\n            chartWidth: posInfo.width\n        });\n    }\n    componentDidMount() {\n        this.resize();\n        window.addEventListener(\"resize\", this.resize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.resize);\n    }\n\n    renderGraph() {\n        return (\n            <VictoryChart\n                externalEventMutations={this.state.externalMutations}\n                theme={VictoryTheme.material}\n                domain={{ x: [0, 100], y: [0, 100] }}\n                // containerComponent={<VictoryZoomContainer zoomDomain={{ x: [0, 100], y: [0, 100] }} />}\n                containerComponent={<VictoryZoomContainer zoomDomain={this.props.startDomain} />}\n                // style={{ parent: { border: \"1px solid #ccc\" } }}\n                width={this.state.chartWidth}\n                height={this.state.chartHeight}\n                events={[\n                    {\n                        childName: [\"playlist\", \"recommended\"],\n                        target: \"data\",\n                        eventHandlers: {\n                            onClick: (_, clicked) => {\n                                return [\n                                    this.createEventHandler(clicked.datum.id, this.props.onPointClick(clicked))\n                                ]\n                            }\n                        }\n                    }\n                ]}\n                padding={{ top: 15, bottom: 20, left: 20, right: 15 }}\n            >\n                <VictoryAxis label={this.props.dataFields.xAxis.name} axisLabelComponent={<VictoryLabel />}\n                    tickLabelComponent={<VictoryLabel dy={-25} />} tickComponent={<LineSegment active={false} />} />\n                <VictoryAxis label={this.props.dataFields.yAxis.name} axisLabelComponent={<VictoryLabel />}\n                    tickLabelComponent={<VictoryLabel dx={33} />} tickComponent={<LineSegment active={false} />} dependentAxis />\n\n                <VictoryScatter\n                    name=\"playlist\"\n                    size={15}\n                    data={this.props.graphData.playlistTracks}\n                    x={this.props.dataFields.xAxis.dataFunction}\n                    y={this.props.dataFields.yAxis.dataFunction}\n                    labels={(d) => \"\"}\n                    labelComponent={<VictoryTooltip flyoutComponent={<TrackHoverDetails />} />}\n                />\n\n                <VictoryScatter\n                    name=\"recommended\"\n                    size={10}\n                    data={this.props.graphData.recommendTracks}\n                    x={this.props.dataFields.xAxis.dataFunction}\n                    y={this.props.dataFields.yAxis.dataFunction}\n                    labels={(d) => \"\"}\n                    labelComponent={<VictoryTooltip flyoutComponent={<TrackHoverDetails />} />}\n                    style={{\n                        data: {\n                            fill: \"tomato\"\n                        }\n                    }}\n                />\n                \n            </VictoryChart>);\n    }\n\n    render() {\n        return (\n            <div id=\"Graph\" className=\"fillheight\">\n                {this.props.graphData ?\n                    this.renderGraph() :\n                    <p className=\"fillheight\">playlist loading</p>}\n            </div>\n        );\n    }\n\n}\n\nexport default TrackGraph;","import React from \"react\";\nimport { Axis, AXIS_UNITS } from '../apis/graphParams';\nimport CornerButtons from './CornerButtons';\nimport TrackGraph from './TrackGraph';\n// import HelpAlert from \"./HelpAlert\";\n\n\nclass Graph extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            dataFields: {\n                xAxis: new Axis(AXIS_UNITS.danceability),\n                yAxis: new Axis(AXIS_UNITS.energy)\n            }\n        }\n        this.setDataFields = this.setDataFields.bind(this);\n    }\n\n    setDataFields(newFields) {\n        this.setState({\n            dataFields: newFields\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"fillheight\" id=\"Graph\">\n                <CornerButtons dataFields={this.state.dataFields} setDataFields={this.setDataFields}\n                    updateRecommendations={this.props.updateRecommendations} forwardedRef={this.props.forwardedRef}\n                />\n                <TrackGraph dataFields={this.state.dataFields}\n                    ref={this.props.forwardedRef}\n                    graphData={this.props.graphData}\n                    onPointClick={this.props.pointClick}\n                    startDomain={{ x: [0, 100], y: [0, 100] }} />\n                {/* <div className=\"alert\"><HelpAlert/></div> */}\n            </div>\n        )\n    }\n}\n\n\nexport default Graph;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup, Popover, PopoverBody } from 'reactstrap';\r\nimport './LeftBar.css';\r\n\r\nexport default class ListTrack extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            popoverOpen: false\r\n        }\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            popoverOpen: !this.state.popoverOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const name = this.props.track.name;\r\n        const artist = this.props.track.artists[0].name;\r\n        return (\r\n            <div className=\"PlaylistEntry\">\r\n                <p>{this.props.i + 1}.</p>\r\n                <div className=\"PlaylistEntryTitle\">\r\n                    <h1 className=\"ellipse\">{name}</h1>\r\n                    <h2 className=\"ellipse\">{artist}</h2>\r\n                </div>\r\n                <div className=\"navBar\" id={\"Popover2\" + this.props.i} onClick={this.toggle}></div>\r\n                <Popover target={\"Popover2\" + this.props.i} placement=\"bottom\" isOpen={this.state.popoverOpen} toggle={this.toggle}>\r\n                    <PopoverBody>\r\n                        <ButtonGroup vertical>\r\n                            <Button color=\"danger\" onClick={() => this.props.removeSong(this.props.track)}>Delete Song</Button>\r\n                            <Button onClick={() => this.props.pointSelect(this.props.track)}>Select Song</Button>\r\n                        </ButtonGroup>\r\n                    </PopoverBody>\r\n                </Popover>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport './LeftBar.css';\nimport ListTrack from './ListTrack';\n\nclass PlaylistViewer extends React.Component {\n\n    render() {\n        if (!this.props.graphData) {\n            return (<div>no playlist</div>)\n        }\n        const playlist = this.props.graphData.playlistTracks\n        return (\n            <div id=\"PlaylistView\">\n                <i>tracks:</i>\n                <Card id=\"PlaylistTracks\">\n                    <CardBody>\n                        {playlist.map((track, i) =>\n                            < ListTrack key={track.name + i} track={track} removeSong={this.props.removeSong}\n                                pointSelect={this.props.pointSelect} i={i} />)\n                        }\n                        {playlist.length===0 ? <p>no tracks in this playlist... yet</p>:null}\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default PlaylistViewer;","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nclass TrackViewer extends React.Component {\r\n\r\n    render() {\r\n        const isRecommendation = this.props.selected.id.startsWith(\"recommended\");\r\n        const track = this.props.selected.datum ? this.props.selected.datum : this.props.selected;\r\n        const albumArt = track.album.images[0].url;\r\n        const name = track.name\r\n        return (\r\n\r\n            <div id=\"TrackViewer\">\r\n                <div id=\"Track\">\r\n                    <h5>{isRecommendation?\"Recommendation:\":\"Playlist Track:\"}</h5>\r\n                    <div><img src={albumArt} style={{ height: 150 }} alt=\"album art\" /></div>\r\n                    <h3>\r\n                        {name}\r\n                    </h3>\r\n                    {isRecommendation ?\r\n                        <Button className=\"OptionButton\" onClick={() => this.props.addTrack(track)}>add track</Button> :\r\n                        <Button className=\"OptionButton\" onClick={() => this.props.removeTrack(track)}>delete</Button>}\r\n                </div>\r\n                <Button id=\"ExitButton\" onClick={() => this.props.exit()}>exit</Button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default TrackViewer;","import React from 'react';\nimport PlaylistViewer from './PlaylistViewer';\nimport TrackViewer from './TrackViewer';\n\nexport default function LeftBar(props){\n        let leftSide;\n        if (props.selected) {\n            leftSide = \n                <TrackViewer \n                    exit={props.pointSelect}\n                    removeTrack={props.removeTrack}\n                    addTrack={props.addTrack}\n                    selected={props.selected} />;\n        }\n        else {\n            leftSide = \n                <PlaylistViewer\n                    graphData={props.graphData} \n                    removeSong={props.removeTrack} \n                    pointSelect={props.pointSelect}/>;\n        }\n        return <div id=\"LeftBar\">\n            {leftSide}\n        </div>;\n}","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nimport { FaHome, FaSyncAlt, FaWrench } from 'react-icons/fa';\n\nclass HelpModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    render() {\n        return (\n            <div >\n                <Button onClick={this.toggle}>{this.props.buttonLabel}</Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <ModalHeader toggle={this.toggle}>A Quick Tour</ModalHeader>\n                    <ModalBody>\n                        <p>Click the <FaWrench /> icon to alter the graph axis and to view the legend</p>\n                        <p>The <FaSyncAlt /> button generates more recommendations</p>\n                        <p>The <FaHome /> buttons centers the graph.</p>\n\n                        <p>Click on the dots to add/remove tracks from the playlist.</p>\n                    </ModalBody>\n                    <ModalFooter >\n                        <p id=\"Creds\">Made by Goh Sato <a href=\"https://github.com/Gohsato/PlaylistObservatory\"  target=\"_blank\" rel=\"noopener noreferrer\">Github Repo</a></p>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default HelpModal","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport { FaChevronLeft } from 'react-icons/fa';\nimport { Button, Col, Row } from 'reactstrap';\nimport { spotifyCalls } from '../apis/spotifyHandler';\nimport Graph from '../Graph/Graph';\nimport LeftBar from '../LeftBar/LeftBar';\nimport './Dashboard.css';\nimport HelpModal from './HelpModal';\n\n\n\nclass DashBoard extends Component {\n    constructor() {\n        super();\n        this.state = {\n            graphData: undefined,\n            selected: undefined,\n        }\n        this.graphRef = React.createRef();\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.pointClick = this.pointClick.bind(this);\n        this.pointSelect = this.pointSelect.bind(this);\n\n        this.updateRecommendations = this.updateRecommendations.bind(this);\n    }\n\n    setGraphData(playlistTracks, recommendTracks) {\n        this.setState({\n            graphData: {\n                playlistTracks: playlistTracks,\n                recommendTracks: recommendTracks,\n            }\n        });\n    }\n    componentDidMount() {\n        spotifyCalls.getGraphData(this.props.playlist.id)\n            .then((response) => {\n                this.setGraphData(response.playlist, response.recommended)\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    updateRecommendations() {\n        spotifyCalls.getRecommendations(this.props.playlist.id)\n            .then((response) => {\n                let playlist = this.state.graphData.playlistTracks;\n                this.setState({\n                    graphData: {\n                        recommendTracks: response,\n                        playlistTracks: playlist\n                    }\n                })\n                this.pointSelect();\n\n            });\n    }\n\n\n    addTrack(track) {\n        spotifyCalls.addTrackToPlaylist(track.uri, this.props.playlist.id)\n            .then((response) => {\n                const newRec = this.state.graphData.recommendTracks.filter(recTrack => recTrack.id !== track.id)\n                this.setGraphData(response, newRec);\n                this.pointSelect();\n            });\n\n    }\n\n    removeTrack(track) {\n        spotifyCalls.removeTrackFromPlaylist(track.uri, this.props.playlist.id)\n            .then((response) => {\n                let newRec = this.state.graphData.recommendTracks\n                this.setGraphData(response, newRec)\n                this.pointSelect()\n            });\n    }\n\n    pointClick(selected) {\n        this.setState({\n            selected\n        })\n    }\n\n    pointSelect(selectedSong = undefined) {\n        this.setState({\n            selected: selectedSong\n        });\n        if (this.graphRef.current) {\n            const id = selectedSong ? selectedSong.id : undefined;\n            this.graphRef.current.setSelected(id);\n        }\n    }\n\n\n    render() {\n\n        return (\n            <>\n                <Row id=\"Header\" noGutters>\n                        <Button id=\"ExitPlaylist\" onClick={this.props.exitPlaylist}>\n                            <FaChevronLeft/> exit playlist\n                        </Button>\n                        <div id=\"PlaylistViewTitle\">\n                            <i>playlist:</i> <b className=\"tomatoFont\">{this.props.playlist.name}</b>\n                        </div>\n                        <HelpModal buttonLabel=\"?\" />\n                </Row>\n                <Row className=\"align-items-center body\" noGutters>\n                    <Col xs=\"3\" className=\"fillheight\">\n                        <LeftBar selected={this.state.selected} pointSelect={this.pointSelect} removeTrack={this.removeTrack}\n                            addTrack={this.addTrack} playlist={this.props.playlist} graphData={this.state.graphData}\n                        />\n                    </Col>\n                    <Col xs=\"9\" className=\"fillheight\">\n                        <Graph forwardedRef={this.graphRef} graphData={this.state.graphData} pointClick={this.pointClick}\n                            updateRecommendations={this.updateRecommendations} />\n                    </Col>\n                </Row>\n            </>\n        )\n    }\n\n\n}\n\nexport default DashBoard;","import React from \"react\";\r\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Jumbotron } from 'reactstrap';\r\nimport './PlaylistSelect.css';\r\nimport {FaMusic} from 'react-icons/fa'\r\n\r\n\r\nfunction NoImage(){\r\n    return(\r\n        <div className=\"noImage\"><FaMusic/><p>no image</p></div>\r\n    )\r\n}\r\n\r\nfunction PlaylistOption(props) {\r\n    const playlist = props.playlist;\r\n\r\n    const img = playlist.images[0] ?\r\n        <CardImg top width=\"100%\" src={playlist.images[0].url} height={150} alt=\"playlistImage\" /> :\r\n       <NoImage/>;\r\n\r\n    const numberOfTracks = playlist.tracks.total;\r\n\r\n    return (\r\n        <Card className=\"PlaylistOption\">\r\n            {img}\r\n            <CardBody>\r\n                <CardTitle className=\"width\" title={playlist.name}>\r\n                    {playlist.name}\r\n                </CardTitle>\r\n                <CardText>\r\n                    {numberOfTracks} tracks\r\n                </CardText>\r\n                <Button onClick={() => {props.setPlaylist(playlist)}}>select</Button>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction PlaylistList(props) {\r\n    let playlists;\r\n    if (props.listOfplaylists) {\r\n        playlists = props.listOfplaylists.map(playlist =>\r\n            <PlaylistOption key={playlist.id} playlist={playlist} setPlaylist={props.setPlaylist} />)\r\n    }\r\n    return (\r\n            <Jumbotron id=\"PlaylistList\">\r\n                <h1>Select a Playlist</h1>\r\n                <p>Choose a playlist to visualize and edit</p>\r\n                <div id=\"Center\">\r\n                    <div id=\"PlaylistDisplay\">{playlists}</div>\r\n                    {props.listOfplaylists?null:<p>you need to create a playlist on spotify first</p>}\r\n                </div>\r\n            </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default PlaylistList;","import React from 'react';\r\nimport { spotifyCalls } from '../apis/spotifyHandler';\r\nimport DashBoard from '../DashBoard/DashBoard';\r\nimport PlaylistList from './PlaylistList';\r\nimport './PlaylistSelect.css';\r\n\r\n\r\nclass PlaylistSelector extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            listOfplaylists: undefined,\r\n            playlist: undefined,\r\n        }\r\n        this.setPlaylist = this.setPlaylist.bind(this);\r\n        this.exitPlaylist = this.exitPlaylist.bind(this);\r\n    }\r\n\r\n\r\n    setPlaylist(playlist) {\r\n        \r\n        this.setState({\r\n            playlist\r\n        });\r\n    }\r\n\r\n    exitPlaylist() {\r\n        this.setPlaylist(undefined);\r\n        spotifyCalls.getUserPlaylists()\r\n        .then((playlistPaginator) => {\r\n            this.setState({\r\n                listOfplaylists: playlistPaginator.items\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        spotifyCalls.getUserPlaylists()\r\n            .then((playlistPaginator) => {\r\n                this.setState({\r\n                    listOfplaylists: playlistPaginator.items\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.playlist) {\r\n            return <DashBoard playlist={this.state.playlist} exitPlaylist={this.exitPlaylist} />\r\n        } else {\r\n            return <PlaylistList listOfplaylists={this.state.listOfplaylists} setPlaylist={this.setPlaylist}/>\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default PlaylistSelector;","import axios from 'axios';\nimport { spotifyApi } from \"./spotifyHandler\";\n\nconst scope = 'user-read-private user-read-email playlist-modify-private playlist-read-private user-top-read';\nconst SESSION_KEYS = {\n    token: 'spotify-access-token',\n    refresh_token: 'spotify-refresh-token',\n    code_verifier: 'spotify-code-verifier',\n    state: 'spotify-state',\n    expires_at: 'spotify-token-expires-at'\n}\n\nfunction generateRandomString(length) {\n    var text = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\nfunction sha256(plain) {\n    // https://stackoverflow.com/a/59913241\n    // returns promise ArrayBuffer\n    const encoder = new TextEncoder();\n    const data = encoder.encode(plain);\n    return window.crypto.subtle.digest('SHA-256', data);\n}\n\nfunction base64urlencode(a) {\n    // https://stackoverflow.com/a/59913241\n    // Convert the ArrayBuffer to string using Uint8 array.\n    // btoa takes chars from 0-255 and base64 encodes.\n    // Then convert the base64 encoded to base64url encoded.\n    // (replace + with -, replace / with _, trim trailing =)\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(a)))\n        .replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\n\nexport async function login() {\n    const code_verifier = generateRandomString(115);\n    const hash = await sha256(code_verifier);\n    const code_challenge = base64urlencode(hash, true);\n    const state = generateRandomString(8);\n\n    sessionStorage.setItem(SESSION_KEYS.code_verifier, code_verifier);\n    sessionStorage.setItem(SESSION_KEYS.state, state);\n\n    const uri = `https://accounts.spotify.com/authorize` +\n        `?response_type=code&client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&` +\n        `redirect_uri=${process.env.REACT_APP_REDIRECT_URI}&scope=${scope}&state=${state}&` +\n        `code_challenge=${code_challenge}&code_challenge_method=S256`;\n\n    window.open(uri, \"_self\");\n}\n\nexport async function sessionStart() {\n\n    // Check if already logged in\n    if (sessionStorage.getItem(SESSION_KEYS.token) !== null) {\n        console.log('found access token');\n\n        spotifyApi.setAccessToken(sessionStorage.getItem(SESSION_KEYS.token));\n        try {\n            await spotifyApi.getMe();\n        } catch (err) {\n            console.log(err)\n            return await refreshToken();\n        }\n        return true;\n    }\n\n    // Handle redirect\n    const params = new URLSearchParams(window.location.search.slice(1));\n    if (params.has('state') && params.get('state') !== sessionStorage.getItem(SESSION_KEYS.state)) {\n        console.log('login failed');\n        return false;\n    }\n    if (params.has('code')) {\n        console.log('getting token');\n        const postBody = {\n            client_id: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\n            grant_type: 'authorization_code',\n            code: params.get('code'),\n            redirect_uri: process.env.REACT_APP_REDIRECT_URI,\n            code_verifier: sessionStorage.getItem(SESSION_KEYS.code_verifier),\n        };\n        return requestToken(postBody);\n\n    } else if (params.has('error')) {\n        console.log('login failed');\n    }\n\n    return false;\n}\n\nasync function requestToken(postBody) {\n    const urlEncodedPostBody = new URLSearchParams(postBody);\n    try {\n        const res = await axios.post('https://accounts.spotify.com/api/token', urlEncodedPostBody, {\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded;\",\n            },\n        });\n        sessionStorage.setItem(SESSION_KEYS.token, res.data.access_token);\n        sessionStorage.setItem(SESSION_KEYS.expires_at, (new Date()).getTime() + (res.data.expires_in * 1000));\n        sessionStorage.setItem(SESSION_KEYS.refresh_token, res.data.refresh_token);\n        spotifyApi.setAccessToken(sessionStorage.getItem(SESSION_KEYS.token));\n        setTimeout(refreshToken, 1000 * (res.data.expires_in - 60));\n        return true;\n    } catch (err) {\n        console.log(\"token request failed\");\n        console.log(err);\n        return false\n    }\n}\n\nasync function refreshToken() {\n    console.log('refresh token');\n    const postBody = {\n        client_id: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\n        grant_type: 'refresh_token',\n        refresh_token: sessionStorage.getItem(SESSION_KEYS.refresh_token)\n    };\n\n    return requestToken(postBody);\n}\n\n","import React, { Component } from 'react';\nimport LoginPage from './LoginPage/LoginPage'\nimport './App.css';\nimport PlaylistSelector from './PlaylistSelect/PlaylistSelector';\nimport { sessionStart, login as spotifyLogin } from './apis/login';\n\nclass App extends Component { \n  constructor(){\n    super();\n    this.state = {\n      loggedIn: false,\n    }\n    sessionStart().then((login)=>{\n      if(login){\n        this.setState({loggedIn:true});\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.loggedIn ?\n          <LoginPage login={spotifyLogin}/>:\n          <PlaylistSelector/>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}